function [fitresult, gof] = createFits(log10_Re_subcrit, log10_Cd_subcrit, log10_Re_supercrit, log10_Cd_supercrit, log10_Re, log10_Cd)
%CREATEFITS1(LOG10_RE_SUBCRIT,LOG10_CD_SUBCRIT,LOG10_RE_SUPERCRIT,LOG10_CD_SUPERCRIT,LOG10_RE,LOG10_CD)
%  Create fits.
%
%  Data for 'Subcritical Fit' fit:
%      X Input : log10_Re_subcrit
%      Y Output: log10_Cd_subcrit
%  Data for 'Supercritical Fit' fit:
%      X Input : log10_Re_supercrit
%      Y Output: log10_Cd_supercrit
%  Data for 'Blended Fit' fit:
%      X Input : log10_Re
%      Y Output: log10_Cd
%  Output:
%      fitresult : a cell-array of fit objects representing the fits.
%      gof : structure array with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 27-Feb-2020 17:28:06

%% Initialization.

% Initialize arrays to store fits and goodness-of-fit.
fitresult = cell( 3, 1 );
gof = struct( 'sse', cell( 3, 1 ), ...
    'rsquare', [], 'dfe', [], 'adjrsquare', [], 'rmse', [] );

%% Fit: 'Subcritical Fit'.
[xData, yData] = prepareCurveData( log10_Re_subcrit, log10_Cd_subcrit );

% Set up fittype and options.
ft = fittype( 'log10(10^(csub0*x+csub1)+csub2+csub3*x)', 'independent', 'x', 'dependent', 'y' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
opts.Lower = [-Inf -Inf 1e-06 0];
opts.StartPoint = [-1 1 1 0];

% Fit model to data.
[fitresult{1}, gof(1)] = fit( xData, yData, ft, opts );

% Plot fit with data.
figure( 'Name', 'Subcritical Fit' );
h = plot( fitresult{1}, xData, yData );
legend( h, 'log10_Cd_subcrit vs. log10_Re_subcrit', 'Subcritical Fit', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'log10_Re_subcrit', 'Interpreter', 'none' );
ylabel( 'log10_Cd_subcrit', 'Interpreter', 'none' );
grid on

%% Fit: 'Supercritical Fit'.
[xData, yData] = prepareCurveData( log10_Re_supercrit, log10_Cd_supercrit );

% Set up fittype and options.
ft = fittype( 'csup0+csupscl/csuph*log(exp(csuph*(csupc-x))+1)', 'independent', 'x', 'dependent', 'y' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
opts.Lower = [-1 6 1e-06 -Inf];
opts.StartPoint = [-0.3 6.6 1 -0.47];
opts.Upper = [-0.12 7 10 Inf];

% Fit model to data.
[fitresult{2}, gof(2)] = fit( xData, yData, ft, opts );

% Plot fit with data.
figure( 'Name', 'Supercritical Fit' );
h = plot( fitresult{2}, xData, yData );
legend( h, 'log10_Cd_supercrit vs. log10_Re_supercrit', 'Supercritical Fit', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'log10_Re_supercrit', 'Interpreter', 'none' );
ylabel( 'log10_Cd_supercrit', 'Interpreter', 'none' );
grid on

%% Fit: 'Blended Fit'.
[xData, yData] = prepareCurveData( log10_Re, log10_Cd );

% Set up fittype and options.
ft = fittype( '(log10(10^(csub0*x+csub1)+csub2+csub3*x))*(1-1/(1+exp(-csigh*(x-csigc))))  + (csup0+csupscl/csuph*log(exp(csuph*(csupc-x))+1))*(1/(1+exp(-csigh*(x-csigc))))', 'independent', 'x', 'dependent', 'y' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
opts.Lower = [-Inf -Inf -Inf -Inf 1e-06 0 -1 6 0 -Inf];
opts.StartPoint = [5.58 24 -0.7 1.05 0.68 0.09 -0.12 6.7 10 -0.47];
opts.Upper = [Inf Inf Inf Inf Inf Inf 1 7 10 Inf];

% Fit model to data.
[fitresult{3}, gof(3)] = fit( xData, yData, ft, opts );

% Plot fit with data.
figure( 'Name', 'Blended Fit' );
h = plot( fitresult{3}, xData, yData );
legend( h, 'log10_Cd vs. log10_Re', 'Blended Fit', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'log10_Re', 'Interpreter', 'none' );
ylabel( 'log10_Cd', 'Interpreter', 'none' );
grid on


